name: "Setup Aptos CLI"
description: "Download and install Aptos CLI on CI (Linux/macOS/Windows, x86_64 & aarch64) and add it to PATH"
branding:
  icon: 'arrow-down'
  color: 'green'
inputs:
  version:
    description: "Aptos CLI version (tag). Use 'latest' to automatically fetch the latest release"
    required: false
    default: "latest"
  install-dir:
    description: "Install directory for Aptos CLI (will install to <dir>/bin)"
    required: false
    default: $HOME/.aptoscli
  movefmt-username:
    description: "GitHub username for movefmt repository"
    required: false
    default: "movebit"
  movefmt-repo:
    description: "GitHub repository name for movefmt"
    required: false
    default: "movefmt"
  movefmt-version:
    description: "movefmt version to install"
    required: false
    default: "1.2.3"
  github-token:
    description: "GitHub token for API access (for higher rate limits and private repos)"
    required: false
    default: ${{ github.token }}
runs:
  using: "composite"
  steps:
    - name: Get version tag
      id: get_version
      shell: bash
      run: |
        if [ "${{ inputs.version }}" = "latest" ]; then
          # Get all releases and find the latest CLI release
          # Require token for API access
          if [ -z "${{ inputs.github-token }}" ]; then
            echo "Error: github-token is required for fetching latest version from GitHub API"
            exit 1
          fi
          TAG=$(curl -H "Authorization: token ${{ inputs.github-token }}" -s https://api.github.com/repos/aptos-labs/aptos-core/releases \
                | grep '"tag_name":' | grep 'aptos-cli-v' | head -1 | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -z "$TAG" ]; then
            echo "Error: Failed to fetch latest CLI version from GitHub API"
            exit 1
          fi
        else
          TAG="aptos-cli-v${{ inputs.version }}"
        fi
        
        # Extract version number from tag
        # Handle formats like: aptos-cli-v7.6.0, v7.6.0, 7.6.0
        if [[ "$TAG" =~ aptos-cli-v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
          VERSION="${BASH_REMATCH[1]}"
        elif [[ "$TAG" =~ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
          VERSION="${BASH_REMATCH[1]}"
        elif [[ "$TAG" =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
          VERSION="${BASH_REMATCH[1]}"
        else
          echo "Error: Could not extract version number from tag: $TAG"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Cache Aptos CLI
      id: cache-aptos
      uses: actions/cache@v4
      with:
        path: ${{ inputs.install-dir }}/bin
        key: aptos-setup-${{ steps.get_version.outputs.version }}-${{ inputs.movefmt-version }}-${{ runner.os }}-${{ runner.arch }}
        restore-keys: |
          aptos-setup-${{ steps.get_version.outputs.version }}-${{ inputs.movefmt-version }}-${{ runner.os }}-
          aptos-setup-${{ steps.get_version.outputs.version }}-${{ inputs.movefmt-version }}-
          aptos-setup-${{ steps.get_version.outputs.version }}-
          aptos-setup-

    - name: Build download URL
      id: dl
      if: steps.cache-aptos.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Detect OS and arch for asset naming
        case "${RUNNER_OS}" in
          Linux)
            os_name="Linux"
            ;;
          macOS)
            os_name="macOS"
            ;;
          Windows)
            os_name="Windows"
            ;;
          *)
            echo "Unsupported OS: $RUNNER_OS" && exit 1
            ;;
        esac
        # Detect architecture for asset naming
        arch_lc=$(echo "${RUNNER_ARCH}" | tr '[:upper:]' '[:lower:]')
        case "$os_name-$arch_lc" in
          Linux-x86|Linux-x64|Linux-x86_64)
            arch_name="x86_64"
            ;;
          Linux-arm|Linux-arm64|Linux-aarch64)
            arch_name="aarch64"
            ;;
          macOS-x86|macOS-x64|macOS-x86_64)
            arch_name="x86_64"
            ;;
          macOS-arm|macOS-arm64|macOS-aarch64)
            arch_name="arm64"
            ;;
          Windows-x86|Windows-x64|Windows-x86_64)
            arch_name="x86_64"
            ;;
          *)
            echo "Unsupported OS/ARCH combination: $os_name-$arch_lc" && exit 1
            ;;
        esac
        asset_name="aptos-cli-${{ steps.get_version.outputs.version }}-${os_name}-${arch_name}.zip"
        url="https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v${{ steps.get_version.outputs.version }}/$asset_name"
        echo "url=$url" >> $GITHUB_OUTPUT

    - name: Download ZIP archive
      if: steps.cache-aptos.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Require token for download
        if [ -z "${{ inputs.github-token }}" ]; then
          echo "Error: github-token is required for downloading Aptos CLI"
          exit 1
        fi
        curl -H "Authorization: token ${{ inputs.github-token }}" -L "${{ steps.dl.outputs.url }}" -o aptos.zip
        if [ ! -f aptos.zip ]; then
          echo "Error: Failed to download Aptos CLI from ${{ steps.dl.outputs.url }}"
          exit 1
        fi

    - name: Unpack & install (Linux/macOS)
      if: runner.os != 'Windows' && steps.cache-aptos.outputs.cache-hit != 'true'
      shell: bash
      run: |
        unzip aptos.zip -d aptos
        mkdir -p "${{ inputs.install-dir }}/bin"
        mv aptos/aptos "${{ inputs.install-dir }}/bin/"
        # Add to PATH for subsequent steps
        echo "${{ inputs.install-dir }}/bin" >> $GITHUB_PATH

    - name: Unpack & install (Windows)
      if: runner.os == 'Windows' && steps.cache-aptos.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Expand-Archive aptos.zip -DestinationPath aptos
        $dest="${{ inputs.install-dir }}\bin"
        New-Item -ItemType Directory -Force -Path $dest | Out-Null
        Move-Item aptos\aptos.exe $dest
        # Add to PATH for subsequent steps
        Add-Content -Path $Env:GITHUB_PATH -Value $dest

    - name: Add to PATH (cache hit)
      if: steps.cache-aptos.outputs.cache-hit == 'true' && runner.os != 'Windows'
      shell: bash
      run: |
        echo "Using cached Aptos CLI installation"
        # Add to PATH for subsequent steps
        echo "${{ inputs.install-dir }}/bin" >> $GITHUB_PATH

    - name: Add to PATH (cache hit - Windows)
      if: steps.cache-aptos.outputs.cache-hit == 'true' && runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Using cached Aptos CLI installation"
        # Add to PATH for subsequent steps
        Add-Content -Path $Env:GITHUB_PATH -Value "${{ inputs.install-dir }}\bin"

    - name: Verify installation
      shell: bash
      run: |
        echo "Installed Aptos CLI version:"
        aptos --version 

    - name: Install movefmt CLI
      if: steps.cache-aptos.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Detect OS and arch for movefmt asset naming
        case "${RUNNER_OS}" in
          Linux)
            os_name="unknown-linux-gnu"
            ;;
          macOS)
            os_name="apple-darwin"
            ;;
          Windows)
            os_name="windows"
            ;;
          *)
            echo "Unsupported OS: $RUNNER_OS" && exit 1
            ;;
        esac
        
        # Detect architecture for movefmt asset naming
        arch_lc=$(echo "${RUNNER_ARCH}" | tr '[:upper:]' '[:lower:]')
        case "$arch_lc" in
          x86|x64|x86_64)
            arch_name="x86_64"
            ;;
          arm|arm64|aarch64)
            arch_name="aarch64"
            ;;
          *)
            echo "Unsupported architecture: $arch_lc" && exit 1
            ;;
        esac
        
        # Build movefmt download URL based on actual release naming
        if [ "$RUNNER_OS" = "Windows" ]; then
          movefmt_asset="movefmt.v${{ inputs.movefmt-version }}-${arch_name}-${os_name}.exe"
        else
          movefmt_asset="movefmt.v${{ inputs.movefmt-version }}-${arch_name}-${os_name}"
        fi
        movefmt_url="https://github.com/${{ inputs.movefmt-username }}/${{ inputs.movefmt-repo }}/releases/download/v${{ inputs.movefmt-version }}/${movefmt_asset}"
        
        echo "Downloading movefmt from: $movefmt_url"
        
        # Download movefmt
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Require token for download
          if [ -z "${{ inputs.github-token }}" ]; then
            echo "Error: github-token is required for downloading movefmt"
            exit 1
          fi
          curl -H "Authorization: token ${{ inputs.github-token }}" -L "$movefmt_url" -o movefmt.exe
          if [ ! -f movefmt.exe ]; then
            echo "Error: Failed to download movefmt from $movefmt_url"
            exit 1
          fi
          # Install on Windows
          mkdir -p "${{ inputs.install-dir }}/bin"
          mv movefmt.exe "${{ inputs.install-dir }}/bin/"
        else
          # Require token for download
          if [ -z "${{ inputs.github-token }}" ]; then
            echo "Error: github-token is required for downloading movefmt"
            exit 1
          fi
          curl -H "Authorization: token ${{ inputs.github-token }}" -L "$movefmt_url" -o movefmt
          if [ ! -f movefmt ]; then
            echo "Error: Failed to download movefmt from $movefmt_url"
            exit 1
          fi
          # Install on Linux/macOS
          chmod +x movefmt
          mv movefmt "${{ inputs.install-dir }}/bin/"
        fi
        
        echo "movefmt installed successfully"

    - name: Verify movefmt installation
      shell: bash
      run: |
        echo "Installed movefmt version:"
        movefmt --version 

    - name: Save installation cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.install-dir }}/bin
        key: aptos-setup-${{ steps.get_version.outputs.version }}-${{ inputs.movefmt-version }}-${{ runner.os }}-${{ runner.arch }}
        restore-keys: |
          aptos-setup-${{ steps.get_version.outputs.version }}-${{ inputs.movefmt-version }}-${{ runner.os }}-
          aptos-setup-${{ steps.get_version.outputs.version }}-${{ inputs.movefmt-version }}-
          aptos-setup-${{ steps.get_version.outputs.version }}-
          aptos-setup- 